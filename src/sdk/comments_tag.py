"""
CommentsTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen
from requests import RequestException
from typing import List
from typing import Dict
from typing import Any
from urllib.parse import parse_qs

from .comment import Comment
from .comment_collection import CommentCollection
from .delete_response import DeleteResponse
from .error_exception import ErrorException

class CommentsTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)


    def get_all(self, base_id: str, table_id_or_name: str, record_id: str) -> CommentCollection:
        """
        Returns a list of comments for the record from newest to oldest.
        """
        try:
            path_params = {}
            path_params['baseId'] = base_id
            path_params['tableIdOrName'] = table_id_or_name
            path_params['recordId'] = record_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = CommentCollection.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode == 400:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 403:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 404:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 500:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def create(self, base_id: str, table_id_or_name: str, record_id: str, payload: Comment) -> Comment:
        """
        Creates a comment on a record. User mentioned is supported.
        """
        try:
            path_params = {}
            path_params['baseId'] = base_id
            path_params['tableIdOrName'] = table_id_or_name
            path_params['recordId'] = record_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['json'] = payload.model_dump(by_alias=True)

            options['headers']['Content-Type'] = 'application/json'

            response = self.http_client.request('POST', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = Comment.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode == 400:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 403:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 404:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 500:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def update(self, base_id: str, table_id_or_name: str, record_id: str, row_comment_id: str, payload: Comment) -> Comment:
        """
        Updates a comment on a record. API users can only update comments they have created. User mentioned is supported.
        """
        try:
            path_params = {}
            path_params['baseId'] = base_id
            path_params['tableIdOrName'] = table_id_or_name
            path_params['recordId'] = record_id
            path_params['rowCommentId'] = row_comment_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['json'] = payload.model_dump(by_alias=True)

            options['headers']['Content-Type'] = 'application/json'

            response = self.http_client.request('PATCH', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = Comment.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode == 400:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 403:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 404:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 500:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def delete(self, base_id: str, table_id_or_name: str, record_id: str, row_comment_id: str) -> DeleteResponse:
        """
        Deletes a comment from a record. Non-admin API users can only delete comments they have created. Enterprise Admins can delete any comment from a record.
        """
        try:
            path_params = {}
            path_params['baseId'] = base_id
            path_params['tableIdOrName'] = table_id_or_name
            path_params['recordId'] = record_id
            path_params['rowCommentId'] = row_comment_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('DELETE', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = DeleteResponse.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode == 400:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 403:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 404:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            if statusCode == 500:
                data = Error.model_validate_json(json_data=response.content)

                raise ErrorException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))



