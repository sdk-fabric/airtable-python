"""
CommentsTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen
from requests import RequestException
from typing import List

from .comment import Comment
from .comment_collection import CommentCollection
from .comment_delete_response import CommentDeleteResponse

class CommentsTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)


    def get_all(self, base_id: str, table_id_or_name: str, record_id: str) -> CommentCollection:
        try:
            path_params = {}
            path_params["baseId"] = base_id
            path_params["tableIdOrName"] = table_id_or_name
            path_params["recordId"] = record_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url("/v0/:baseId/:tableIdOrName/:recordId/comments", path_params)

            headers = {}

            response = self.http_client.get(url, headers=headers, params=self.parser.query(query_params, query_struct_names))

            if response.status_code >= 200 and response.status_code < 300:
                return CommentCollection.model_validate_json(json_data=response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))

    def create(self, base_id: str, table_id_or_name: str, record_id: str, payload: Comment) -> Comment:
        try:
            path_params = {}
            path_params["baseId"] = base_id
            path_params["tableIdOrName"] = table_id_or_name
            path_params["recordId"] = record_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url("/v0/:baseId/:tableIdOrName/:recordId/comments", path_params)

            headers = {}
            headers["Content-Type"] = "application/json"

            response = self.http_client.post(url, headers=headers, params=self.parser.query(query_params, query_struct_names), json=payload.model_dump(by_alias=True))

            if response.status_code >= 200 and response.status_code < 300:
                return Comment.model_validate_json(json_data=response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))

    def update(self, base_id: str, table_id_or_name: str, record_id: str, row_comment_id: str, payload: Comment) -> Comment:
        try:
            path_params = {}
            path_params["baseId"] = base_id
            path_params["tableIdOrName"] = table_id_or_name
            path_params["recordId"] = record_id
            path_params["rowCommentId"] = row_comment_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url("/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId", path_params)

            headers = {}
            headers["Content-Type"] = "application/json"

            response = self.http_client.patch(url, headers=headers, params=self.parser.query(query_params, query_struct_names), json=payload.model_dump(by_alias=True))

            if response.status_code >= 200 and response.status_code < 300:
                return Comment.model_validate_json(json_data=response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))

    def delete(self, base_id: str, table_id_or_name: str, record_id: str, row_comment_id: str) -> CommentDeleteResponse:
        try:
            path_params = {}
            path_params["baseId"] = base_id
            path_params["tableIdOrName"] = table_id_or_name
            path_params["recordId"] = record_id
            path_params["rowCommentId"] = row_comment_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url("/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId", path_params)

            headers = {}

            response = self.http_client.delete(url, headers=headers, params=self.parser.query(query_params, query_struct_names))

            if response.status_code >= 200 and response.status_code < 300:
                return CommentDeleteResponse.model_validate_json(json_data=response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))


